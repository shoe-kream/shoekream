plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'

	id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache:3.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.0.4'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.mockito:mockito-inline:5.2.0'
	implementation 'org.projectlombok:lombok:1.18.22'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// jaxb-api 라이브러리 : 자바 17에는 이 라이브러리를 추가해주어야 jwt 토큰 생성 시 에러가 발생하지 않음
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'

	// aop 사용
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'

	// 메일 발송
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// jar 파일 1개 생성
	jar {
		enabled = false
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'  // Test 이후 커버리지가 동작하도록 finalizedBy 추가
}

jacoco {
	toolVersion = '0.8.8'
}

// 바이너리 커버리지 결과를 사람이 읽기 좋은 형태의 리포트로 저장
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled true
		csv.enabled false

		// html 파일 위치 지정
		html.destination file('build/reports/myReport.html')
	}

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	// 리포트 작성 시 특정 파일 제외
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/Application*',
							'**/*Request*',
							'**/*Response*',
							'**/*ExceptionManager*',
							'**/config',
							'**/util'
//							'**/controller',
//							'**/*RestController*',
//					] + Qdomains)
					])
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// 내가 원하는 커버리지 기준을 만족하는지 확인해 주는 task
// 점수 평가 및 검증 단계
jacocoTestCoverageVerification {

//	def Qdomains = []
//	for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
//		Qdomains.add(qPattern + "*")
//	}

	violationRules {
		rule {
			enabled = true // 활성화
			element = 'CLASS' // 클래스 단위로 커버리지 체크
			// includes = []

			// 라인 커버리지 제한을 80%로 설정
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			// 브랜치 커버리지 제한을 80%로 설정
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}

			excludes = [
					'*.ShoekreamApplication*',
					'*.*Request*',
					'*.*Response*',
					'*.*ExceptionManager*',
					'*.config.*',
//					'*.*RestController*',
//					'*.controller.*',
//					'*.util.*',
//			] + Qdomains
			]
		}
	}
}